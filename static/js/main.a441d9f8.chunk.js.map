{"version":3,"sources":["components/Constants.js","components/Cell.js","components/Rules.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Constants","CELL_SIZE","WIDTH","HEIGHT","Cell","this","props","x","y","className","darkMode","style","left","top","width","height","React","Component","Rules","class","genCount","Game","state","cells","isRunning","interval","handleClick","event","elemOffset","getElementOffset","offsetX","clientX","offsetY","clientY","Math","floor","cols","rows","board","setState","makeCells","runGame","runIteration","stopGame","timeoutHandler","window","clearTimeout","handleIntervalChange","target","value","handleClear","makeEmptyBoard","handleRandom","random","handleNext","handleDarkMode","rect","boardRef","getBoundingClientRect","doc","document","documentElement","pageXOffset","clientLeft","pageYOffset","clientTop","push","newBoard","neighbors","calculateNeighbors","setTimeout","dirs","i","length","dir","y1","x1","backgroundSize","onClick","ref","n","map","cell","key","onChange","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a441d9f8.chunk.js","sourcesContent":["const Constants = {\r\n    CELL_SIZE: 20,\r\n    WIDTH: 500,\r\n    HEIGHT: 500,\r\n}\r\n\r\nexport default Constants","import React from 'react';\r\nimport Constants from './Constants.js';\r\n\r\nclass Cell extends React.Component {\r\n\r\n    render() {\r\n        const { x, y, } = this.props;\r\n        return (\r\n            <div className={this.props.darkMode ? \"darkModeCell\" : \"Cell\"} style={{\r\n                left: `${Constants.CELL_SIZE * x + 1}px`,\r\n                top: `${Constants.CELL_SIZE * y + 1}px`,\r\n                width: `${Constants.CELL_SIZE - 1}px`,\r\n                height: `${Constants.CELL_SIZE - 1}px`,\r\n            }} />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Cell;","import React from 'react';\r\nimport './Game.css'\r\n\r\nfunction Rules() {\r\n    return (\r\n        <div class=\"container\">\r\n            <h3>About Conway's Game of Life:</h3>\r\n                <p>Life is played on a grid of cells. A cell can be live or dead. A live cell is shown by putting a marker on it. A dead cell is shown by leaving it empty. Each cell in the grid has a neighborhood consisting of the eight cells in every direction including diagonals. We count the live neighbors for each cell and what happens next depends on this number.</p>\r\n            <h4>Rules:</h4>\r\n            <p>1. A live cell with only one neighbor dies (loneliness)</p>\r\n            <p>2. A live cell with two or three neighbors has no change (survival)</p>\r\n            <p>3. A dead cell with exactly three neighbors becomes alive (birth)</p>\r\n            <p>4. A live cell with four or more neighbors dies (overcrowding) </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Rules","import React from 'react';\r\nimport './Game.css';\r\nimport Cell from './Cell.js';\r\nimport Constants from './Constants.js';\r\nimport Rules from './Rules.js'\r\n\r\nlet genCount = 1;\r\n\r\nclass Game extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.rows = Constants.HEIGHT / Constants.CELL_SIZE;\r\n        this.cols = Constants.WIDTH / Constants.CELL_SIZE;\r\n\r\n        this.board = this.makeEmptyBoard();\r\n    }\r\n\r\n    state = {\r\n        cells: [],\r\n        isRunning: false,\r\n        interval: 100,\r\n        darkMode: false,\r\n    }\r\n\r\n    makeEmptyBoard() {\r\n        // set board rows and columns to empty/0\r\n        let board = [];\r\n        for (let y = 0; y < this.rows; y++) {\r\n            board[y] = [];\r\n            for (let x = 0; x < this.cols; x++) {\r\n                board[y][x] = false;\r\n            }\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    // calculate position of board element\r\n    getElementOffset() {\r\n        const rect = this.boardRef.getBoundingClientRect();\r\n        const doc = document.documentElement;\r\n\r\n        return {\r\n            x: (rect.left + window.pageXOffset) - doc.clientLeft,\r\n            y: (rect.top + window.pageYOffset) - doc.clientTop,\r\n        };\r\n    }\r\n\r\n    makeCells() {\r\n        let cells = [];\r\n        for (let y = 0; y < this.rows; y++) {\r\n            for (let x = 0; x < this.cols; x++) {\r\n                if (this.board[y][x]) {\r\n                    cells.push({ x, y });\r\n                }\r\n            }\r\n        }\r\n\r\n        return cells;\r\n    }\r\n\r\n    handleClick = (event) => {\r\n\r\n        // retrieve click position\r\n        const elemOffset = this.getElementOffset();\r\n        const offsetX = event.clientX - elemOffset.x;\r\n        const offsetY = event.clientY - elemOffset.y;\r\n        // convert to relative position\r\n        const x = Math.floor(offsetX / Constants.CELL_SIZE);\r\n        const y = Math.floor(offsetY / Constants.CELL_SIZE);\r\n        // calculate cols and rows of cell being clicked\r\n        if (x >= 0 && x <= this.cols && y >= 0 && y <= this.rows) {\r\n            this.board[y][x] = !this.board[y][x];\r\n        }\r\n\r\n        this.setState({ cells: this.makeCells() });\r\n    }\r\n\r\n    runGame = () => {\r\n        this.setState({ isRunning: true });\r\n        this.runIteration();\r\n    }\r\n\r\n    stopGame = () => {\r\n        this.setState({ isRunning: false });\r\n        if (this.timeoutHandler) {\r\n            window.clearTimeout(this.timeoutHandler);\r\n            this.timeoutHandler = null;\r\n        }\r\n    }\r\n\r\n    runIteration() {\r\n        let newBoard = this.makeEmptyBoard();\r\n\r\n        for (let y = 0; y < this.rows; y++) {\r\n            for (let x = 0; x < this.cols; x++) {\r\n                let neighbors = this.calculateNeighbors(this.board, x, y);\r\n                if (this.board[y][x]) {\r\n                    if (neighbors === 2 || neighbors === 3) {\r\n                        newBoard[y][x] = true;\r\n                    } else {\r\n                        newBoard[y][x] = false;\r\n                    }\r\n                } else {\r\n                    if (!this.board[y][x] && neighbors === 3) {\r\n                        newBoard[y][x] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.board = newBoard;\r\n        this.setState({ cells: this.makeCells() });\r\n        genCount++\r\n\r\n        this.timeoutHandler = window.setTimeout(() => {\r\n            this.runIteration();\r\n        }, this.state.interval);\r\n    }\r\n\r\n    calculateNeighbors(board, x, y) {\r\n        let neighbors = 0;\r\n        const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\r\n        for (let i = 0; i < dirs.length; i++) {\r\n            const dir = dirs[i];\r\n            let y1 = y + dir[0];\r\n            let x1 = x + dir[1];\r\n\r\n            if (x1 >= 0 && x1 < this.cols && y1 >= 0 && y1 < this.rows && board[y1][x1]) {\r\n                neighbors++;\r\n            }\r\n        }\r\n\r\n        return neighbors;\r\n    }\r\n\r\n    handleIntervalChange = (event) => {\r\n        this.setState({ interval: event.target.value });\r\n    }\r\n\r\n    handleClear = () => {\r\n        this.board = this.makeEmptyBoard();\r\n        this.setState({ cells: this.makeCells() });\r\n        genCount = 1\r\n    }\r\n\r\n    handleRandom = () => {\r\n        for (let y = 0; y < this.rows; y++) {\r\n            for (let x = 0; x < this.cols; x++) {\r\n                this.board[y][x] = (Math.random() >= 0.5);\r\n            }\r\n        }\r\n\r\n        this.setState({ cells: this.makeCells() });\r\n    }\r\n    handleNext = () => {\r\n        // start iteration\r\n        this.setState({ isRunning: true })\r\n        this.runIteration()\r\n        // stop iteration\r\n        this.stopGame()\r\n    }\r\n    handleDarkMode= () => {\r\n        if(this.state.darkMode === true) {\r\n            this.setState({ darkMode: false })\r\n        } else {\r\n            this.setState({ darkMode: true })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { cells, interval, isRunning } = this.state;\r\n        return (\r\n            <div>\r\n                <div>Generation: {genCount}</div>\r\n                <div className={this.state.darkMode ? \"darkModeBoard\" : \"Board\"}\r\n                    style={{ width: Constants.WIDTH, height: Constants.HEIGHT, backgroundSize: `${Constants.CELL_SIZE}px ${Constants.CELL_SIZE}px`}}\r\n                    onClick={this.handleClick}\r\n                    ref={(n) => { this.boardRef = n; }}>\r\n\r\n                    {cells.map(cell => (\r\n                        <Cell darkMode={this.state.darkMode} x={cell.x} y={cell.y} key={`${cell.x},${cell.y}`}/>\r\n                    ))}\r\n                </div>\r\n\r\n                <div className=\"controls\">\r\n                    Speed: <input value={interval} onChange={this.handleIntervalChange} /> msec\r\n                    {isRunning ?\r\n                        <button className=\"button\" onClick={this.stopGame}>Stop</button> :\r\n                        <button className=\"button\" onClick={this.runGame}>Run</button>\r\n                    }\r\n                    <button className=\"button\" onClick={this.handleNext}>Next</button>\r\n                    <button className=\"button\" onClick={this.handleRandom}>Random</button>\r\n                    <button className=\"button\" onClick={this.handleClear}>Clear</button>\r\n                    <button className=\"button\" onClick={this.handleDarkMode}>Dark Mode</button>\r\n                </div>\r\n                <div className=\"rules\">\r\n                    <Rules />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Game;","import React from 'react';\nimport './App.css';\nimport Game from './components/Game.js';\n \n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Conway's Game of Life</h1>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}